#!/usr/bin/env python
'''
Profile a command, giving max/avg threads, mem, i/o, etc..

Helpful BASH alias:
    profile() {
        profiler --cmd="$*" --out=/tmp/profiler.out --stdout=/tmp/profiler.stdout --stderr=/tmp/profiler.stderr
    }
    enables simple usage: profile "MY LONG BASH COMMAND | COMMAND 2 > STUFF_HERE"
'''


#import collections
import subprocess
import argparse
import os
import sys
import time
import json

import pprint
import psutil

pp = pprint.PrettyPrinter(indent=2, depth=3)


## Config

VERSION = "0.8.0"

DEFAULTS = {
    'poll_wait': .1,
    'report_wait': 2,
    'cpu_threshold': .01,
    'max_polls': 0,
    'verbosity': 1,
    'out': '/dev/stdout',
    'stderr': None,
    'stdout': None,
    'stdin': None,
    'time_format': "%Y%m%d-%H%M%S",
    }
ARGS = None


## Classes

class Profiler(object):
    """Profiler class"""
    popen = None
    pid = None
    cmd = None
    process = None
    proc_infos = []
    proc_info_summary = {}
    rollup = {}
    num_polls = 0
    status = None

    stderr = None
    stdout = None
    stdin = None

    start_time = None
    stop_time = None
    returncode = None

    last_report_time = 0
    outfile = '/dev/stdout'

    exclude = [
        'cmdline',
        'cpu_affinity',
        'create_time',
        'cwd',
        'exe',
        'environ',
        'gids',
        'name',
        'ppid',
        'status',
        'terminal',
        'uids',
        'username',
        'nice',
        'ionice',
        ]

    def __init__(self, **kwargs):
        if 'cmd' in kwargs:
            self.cmd = kwargs['cmd']
        elif 'pid' in kwargs:
            self.pid = kwargs['pid']
            self.process = psutil.Process(self.pid)

        if 'stdout' in kwargs:
            self.stdout = kwargs['stdout']

        if 'stderr' in kwargs:
            self.stderr = kwargs['stderr']

        if 'outfile' in kwargs:
            self.outfile = kwargs['outfile']

        self.status = "new"
        self.report()


    def run(self):
        """Run our command"""

        self.status = "starting"
        self.report()

        self.popen = subprocess.Popen(self.cmd,
                                      shell=True,
                                      stderr=self.stderr,
                                      stdout=self.stdout,
                                      stdin=self.stdin)
        if self.popen.pid:
            self.pid = self.popen.pid
            self.process = psutil.Process(self.pid)

        # Our shell process should have at least 1 child, the command
        if len(self.process.children()) > 0:
            self.status = "running"

        elif not self.process.is_running():
            self.status = "failed"

        else:
            self.status = "failed"
            # Let the shell process catch up to the failed child process, so it can exit
            self.popen.communicate()

        self.report()

        if self.status == "running":
            return True
        else:
            return False


    def watch_process(self):
        """Watch our parent process and all children"""

        self.start_time = time.strftime(DEFAULTS['time_format'])
        self.status = "watching"

        #print "Watching command with pid: {0}".format(self.pid)
        while ARGS.max_polls == 0 or self.num_polls < ARGS.max_polls:
            if self.poll_processes():
                rollup_dict(self.rollup, self.proc_info_summary)

                # Report, if enough time has elapsed since last report
                if (time.time() - ARGS.report_wait) > self.last_report_time:
                    self.report()

                try:
                    gone, alive = psutil.wait_procs([self.process],
                                                    timeout=ARGS.poll_wait,
                                                    callback=self.on_terminate)

                    if not alive:
                        break

                except psutil.TimeoutExpired:
                    pass

            try:
                sys.stdout.flush()
            except:
                pass

        #print "Process {0} has exited".format(self.pid)
        filter_dict(self.rollup, ['accum', 'num_polls'])

        self.stop_time = time.strftime(DEFAULTS['time_format'])
        self.status = "exited"


    def poll_processes(self):
        """Poll the snapshotted info of the parent and child processes,
           rolling all into a single snapshot"""

        self.snapshot_proc_infos()
        self.num_polls += 1

        if len(self.proc_infos) < 1:
            #print "Not able to poll processes"
            return False
        else:
            # Merge all proc infos into one object
            proc_info_summary_rollup = {}
            for proc_info in self.proc_infos:
                rollup_dict(proc_info_summary_rollup, proc_info)

            self.proc_info_summary = flatten_dict(proc_info_summary_rollup, ['accum'])
            return True


    def snapshot_proc_infos(self):
        """Grab from the OS the info on all the watched processes, converting it
           to dict, adding some derived info."""
        # Identify all the processes to check
        procs = self.process.children(recursive=True)
        procs.append(self.process)

        # Get the info on each process in the tree
        self.proc_infos = []
        for proc in procs:
            try:
                proc_as_dict = proc.as_dict()
                for aspect in self.exclude:
                    proc_as_dict.pop(aspect, None)

                proc_info = self.plainify(proc_as_dict)
                self.add_virt_infos(proc_info)
                self.proc_infos.append(proc_info)
            except:
                #print "Couldn't get proc: {0}".format(proc.pid)
                pass


    def add_virt_infos(self, proc):
        """Add derived data info to the process"""
        # Add v_threads_running flag
        #proc['v_threads_running'] = proc['num_threads']
        pass


    def plainify(self, obj):
        """Convert a given nested object containing structs and objects with custom fields,
        to a plain list, dict, literal, etc, with the custom fields as a dict"""
        out = None

        if isinstance(obj, str) or isinstance(obj, float) or isinstance(obj, int):
            out = obj

        elif isinstance(obj, list):
            out = [self.plainify(item) for item in obj]

        elif isinstance(obj, dict):
            out = {key: self.plainify(value) for key, value in obj.iteritems()}

        else:
            out = self.plainify(dict(zip(obj.__class__._fields, obj)))

        return out


    def is_running(self, process):
        """Guess whether this process has run since the last time we polled"""
        cpu_percent = process.get('cpu_percent', None)
        pid = process.get('pid', None)

        if cpu_percent is not None and pid is not None:
            running = cpu_percent > DEFAULTS['cpu_threshold']
        else:
            running = False

        return running


    def on_terminate(self, proc):
        self.returncode = proc.returncode


    def report(self):
        """Report on the proc infos and rollups"""

        self.last_report_time = time.time()

        report = {
            "rollup": self.rollup,
            "version": VERSION,
            "meta": {
                "num_polls": self.num_polls,
                "status": self.status,
                "cmd": self.cmd,
                "pid": self.pid,
                "start_time": self.start_time,
                "stop_time": self.stop_time,
                "returncode": self.returncode,
                "poll_wait": ARGS.poll_wait,
                "report_wait": ARGS.report_wait,
            }
        }
        with open(self.outfile, 'w') as fh:
            json.dump(report, fh, sort_keys=True, indent=4, separators=(',', ': '))


## Functions

def parse_args():
    """Parse given args"""
    parser = argparse.ArgumentParser(description='Profile a command')
    parser.add_argument('--cmd',
                        help='Command to profile')
    parser.add_argument('--pid',
                        type=int,
                        help='Process ID to profile')
    parser.add_argument('--max-polls',
                        dest='max_polls',
                        default=DEFAULTS['max_polls'],
                        type=int,
                        help='Max number of polls. Default: {0}'.format(DEFAULTS['max_polls']))
    parser.add_argument('--poll-wait',
                        dest='poll_wait',
                        default=DEFAULTS['poll_wait'],
                        type=float,
                        help=('Wait time in seconds between polls.'
                              'Can be a float. Default: {0}').format(DEFAULTS['poll_wait']))
    parser.add_argument('--report-wait',
                        dest='report_wait',
                        default=DEFAULTS['report_wait'],
                        help=('Wait time in seconds to repeatedly write an interim result to the '
                              'report file. 0 indicates no interim reports, only final. '
                              ' Default is {0}s'.format(DEFAULTS['report_wait'])))
    parser.add_argument('-v',
                        action='count',
                        dest='verbosity',
                        default=DEFAULTS['verbosity'],
                        help='Increase the verbosity level')
    parser.add_argument('--out',
                        dest='out',
                        default=DEFAULTS['out'],
                        help='Output file')
    parser.add_argument('--stdout',
                        dest='stdout',
                        default=DEFAULTS['stdout'],
                        help='File to append STDOUT of the command')
    parser.add_argument('--stderr',
                        dest='stderr',
                        default=DEFAULTS['stderr'],
                        help='File to append STDERR of the command')
    parser.add_argument('--version',
                        dest='version',
                        action='store_true',
                        default=False,
                        help='Output version')

    return parser.parse_args()


def rollup_dict(rolling_dict, obj):
    """Recursively roll up the given object (according to it's type), given a rollup obj
    previously created with this"""

    if rolling_dict is None:
        rolling_dict = {}

    # Rollup each value in the dict
    for key, value in obj.iteritems():
        # Init our rolling_dict, so we don't throw errors further on
        if key not in rolling_dict:
            rolling_dict[key] = None

        if isinstance(value, dict):
            # Case of a dict, rollup recursively
            sub_dict = rollup_dict(rolling_dict.get(key, {}), value)
            rolling_dict[key] = sub_dict

        elif isinstance(value, list):
            # Case of a list, rollup the length of the list
            rolling_dict[key] = rollup_obj(rolling_dict[key], len(value))

        elif isinstance(value, float) or isinstance(value, int) or isinstance(value, str):
            # Case of an immutable, roll it up
            rolling_dict[key] = rollup_obj(rolling_dict[key], value)

        elif value is None:
            pass

        else:
            raise "Unknown rollup_dict item type"

    return rolling_dict


def filter_dict(given_obj, keys_to_remove):
    """Recursively walk the given obj and remove given keys if it's a dict"""

    # Filter this if it's a dict
    if isinstance(given_obj, dict):
        for key in keys_to_remove:
            given_obj.pop(key, None)

    # Filter each value in the dict
    for key, value in given_obj.iteritems():
        if isinstance(value, dict):
            # Element is another dict, filter recursively
            filter_dict(given_obj[key], keys_to_remove)

    return given_obj


def flatten_dict(given_obj, keys_to_replace):
    """Recursively walk the given obj and replace dict {given_keys: X} with their X values"""

    for key, value in given_obj.iteritems():
        if isinstance(value, dict):
            replace_keys = list(set(value.keys()) & set(keys_to_replace))
            if len(replace_keys) > 0:
                given_obj[key] = value[replace_keys[0]]
            else:
                # Element is another dict, filter recursively
                flatten_dict(given_obj[key], keys_to_replace)

    return given_obj


def rollup_obj(rolling_obj, new_value):
    """ Rollup a given prev rollup dict, new value with (max, min, avg, accum)"""

    # Set result to something else, in these cases
    if rolling_obj is not None:
        rolling_obj['num_polls'] += 1

        if new_value > rolling_obj['max']:
            rolling_obj['max'] = new_value

        if new_value < rolling_obj['min']:
            rolling_obj['min'] = new_value

        if not isinstance(rolling_obj['avg'], str) and not isinstance(new_value, str):
            rolling_obj['avg'] = (rolling_obj['avg'] * (rolling_obj['num_polls'] - 1) + new_value) \
                                 / rolling_obj['num_polls']

        if not isinstance(rolling_obj['accum'], str) and not isinstance(new_value, str):
            rolling_obj['accum'] = rolling_obj['accum'] + new_value

    else:
        # Initialize our rolling_obj object
        rolling_obj = {'max': new_value,
                       'avg': new_value,
                       'min': new_value,
                       'accum': new_value,
                       'num_polls': 1}

    return rolling_obj


def backup_file(orig_file):
    if os.path.exists(orig_file):
        os.rename(orig_file, orig_file + '.bak')


def main():
    """Main"""
    global ARGS
    ARGS = parse_args()

    if ARGS.version:
        print "profiler {0}".format(VERSION)
        sys.exit(0)

    # Handle the different ways we can redirect stdin/stdout of this script and
    #  the command we're watching
    if ARGS.stdout is not None:
        backup_file(ARGS.stdout)
        cmd_stdout = open(ARGS.stdout, 'w')
    else:
        cmd_stdout = open('/dev/null', 'w')

    if ARGS.stderr is not None:
        backup_file(ARGS.stderr)
        cmd_stderr = open(ARGS.stderr, 'w')
    else:
        cmd_stderr = open('/dev/null', 'w')

    # Run the command, or grab an existing one
    if ARGS.cmd:
        profiler = Profiler(cmd=ARGS.cmd, stdout=cmd_stdout, stderr=cmd_stderr, outfile=ARGS.out)
        if not profiler.run():
            print "Command failed"
            sys.exit(2)

    elif ARGS.pid:
        profiler = Profiler(pid=ARGS.pid)

    else:
        print "You must specify --cmd or --pid"
        sys.exit(1)

    # Watch it til it dies
    profiler.watch_process()

    # Report results
    profiler.report()


## Main Entry

if __name__ == "__main__":
    main()
